import os
import json
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
import asyncio

# –ò–º–ø–æ—Ä—Ç –≤–∞—à–µ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
from scrap import SimpleSportboxScraper
from scrap import main as scrap_main

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserStates(StatesGroup):
    main_menu = State()
    viewing_news = State()
    viewing_club_news = State()
    selecting_club = State()

class FootballNewsBot:
    def __init__(self, token: str):
        self.token = token
        self.scraper = SimpleSportboxScraper()
        self.news_data = []
        self.current_news_index = {}
        self.is_parsing = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aiogram
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        self.router = Router()
        self.dp.include_router(self.router)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.register_handlers()

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥–∞ /start
        self.router.message.register(self.start_handler, Command("start"))
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.router.message.register(self.main_menu_handler, StateFilter(UserStates.main_menu))
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ—Å—Ç–µ–π
        self.router.message.register(self.news_handler, StateFilter(UserStates.viewing_news))
        
        # –í—ã–±–æ—Ä –∫–ª—É–±–∞
        self.router.message.register(self.club_selection_handler, StateFilter(UserStates.selecting_club))

    async def get_news_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏"""
        if self.is_parsing:
            return self.news_data
            
        self.is_parsing = True
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
            loop = asyncio.get_event_loop()
            news = await loop.run_in_executor(None, scrap_main)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            if news:
                self.news_data = [item for item in news if item.get('title')]
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.news_data)} –Ω–æ–≤–æ—Å—Ç–µ–π")
            else:
                logger.warning("–ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π")
                self.news_data = []
                
            return self.news_data
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return []
        finally:
            self.is_parsing = False

    async def start_handler(self, message: Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
        user = message.from_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = user.id
        self.current_news_index[user_id] = 0
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_msg = await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
        news_data = await self.get_news_data()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_msg.delete()
        
        if not news_data:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì∞ –°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏")],
                [KeyboardButton(text="üèÜ –°–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª—É–±—É")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(
            "‚öΩ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç!\n"
            f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(news_data)} —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=keyboard
        )
        
        await state.set_state(UserStates.main_menu)

    async def main_menu_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        text = message.text
        
        if text == "üì∞ –°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏":
            await self.show_all_news(message, state)
        
        elif text == "üèÜ –°–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª—É–±—É":
            await self.show_club_selection_menu(message, state)

    async def show_all_news(self, message: Message, state: FSMContext):
        """–ü–æ–∫–∞–∑ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        user_id = message.from_user.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
        news_data = await self.get_news_data()
        
        if not news_data:
            await message.answer("‚ùå –ù–æ–≤–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return await self.show_main_menu(message, state)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.current_news_index[user_id] = 0
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
        await self.show_current_news(message, state, user_id)
        
        await state.set_state(UserStates.viewing_news)

    async def show_current_news(self, message: Message, state: FSMContext, user_id: int):
        """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏"""
        if user_id not in self.current_news_index:
            self.current_news_index[user_id] = 0
            
        current_index = self.current_news_index[user_id]
        
        if current_index >= len(self.news_data):
            await message.answer("üì≠ –ù–æ–≤–æ—Å—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!")
            return await self.show_main_menu(message, state)
        
        news_item = self.news_data[current_index]
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ—Å—Ç—å—é
        message_text = f"üì∞ {news_item.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}\n\n"
        if news_item.get('rubric'):
            message_text += f"üè∑Ô∏è –†—É–±—Ä–∏–∫–∞: {news_item['rubric']}\n"
        if news_item.get('date'):
            message_text += f"üìÖ –î–∞—Ç–∞: {news_item['date']}\n"
        if news_item.get('link'):
            message_text += f"üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {news_item['link']}\n"
        
        message_text += f"\nüìä –ù–æ–≤–æ—Å—Ç—å {current_index + 1} –∏–∑ {len(self.news_data)}"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å")],
                [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            if news_item.get('image_url'):
                await message.answer_photo(
                    photo=news_item['image_url'],
                    caption=message_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.HTML
                )
            else:
                await message.answer(
                    message_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.HTML
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            await message.answer(
                message_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )

    async def show_club_selection_menu(self, message: Message, state: FSMContext):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–ª—É–±–∞"""
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥"), KeyboardButton(text="–ë–∞—Ä—Å–µ–ª–æ–Ω–∞")],
                [KeyboardButton(text="–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥"), KeyboardButton(text="–ß–µ–ª—Å–∏")],
                [KeyboardButton(text="–ë–∞–≤–∞—Ä–∏—è"), KeyboardButton(text="–Æ–≤–µ–Ω—Ç—É—Å")],
                [KeyboardButton(text="üîç –î—Ä—É–≥–∏–µ –∫–ª—É–±—ã"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±:",
            reply_markup=keyboard
        )
        
        await state.set_state(UserStates.selecting_club)

    async def club_selection_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª—É–±–∞"""
        text = message.text
        
        if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.show_main_menu(message, state)
            return
        
        if text == "üîç –î—Ä—É–≥–∏–µ –∫–ª—É–±—ã":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞:")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –æ–¥–∏–Ω –∏–∑ –∫–ª—É–±–æ–≤
        clubs = ["–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥", "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞", "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥", "–ß–µ–ª—Å–∏", "–ë–∞–≤–∞—Ä–∏—è", "–Æ–≤–µ–Ω—Ç—É—Å"]
        if text in clubs:
            await self.show_club_news(message, state, text)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Å–≤–æ–π –∫–ª—É–±
            await self.show_club_news(message, state, text)

    async def show_club_news(self, message: Message, state: FSMContext, club_name: str):
        """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–ª—É–±—É"""
        user_id = message.from_user.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏
        news_data = await self.get_news_data()
        
        if not news_data:
            await message.answer("‚ùå –ù–æ–≤–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return await self.show_main_menu(message, state)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—É–±—É (–∏—â–µ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏ —Ä—É–±—Ä–∏–∫–µ)
        club_news = []
        for news in news_data:
            title = news.get('title', '').lower()
            rubric = news.get('rubric', '').lower()
            club_lower = club_name.lower()
            
            if (club_lower in title or 
                club_lower in rubric or
                any(word in title for word in club_lower.split())):
                club_news.append(news)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–ª—É–±–∞ '{club_name}': {len(club_news)}")
        
        if not club_news:
            await message.answer(
                f"‚ùå –ù–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—É–±—É '{club_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–ª—É–± –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏."
            )
            return await self.show_club_selection_menu(message, state)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            club_news=club_news,
            club_news_index=0,
            current_club=club_name
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
        await self.show_current_club_news(message, state, user_id)
        
        await state.set_state(UserStates.viewing_news)

    async def show_current_club_news(self, message: Message, state: FSMContext, user_id: int):
        """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏ –∫–ª—É–±–∞"""
        user_data = await state.get_data()
        club_news = user_data.get('club_news', [])
        current_index = user_data.get('club_news_index', 0)
        club_name = user_data.get('current_club', '–∫–ª—É–±—É')
        
        if current_index >= len(club_news):
            await message.answer(f"üì≠ –ù–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—É–±—É '{club_name}' –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!")
            return await self.show_main_menu(message, state)
        
        news_item = club_news[current_index]
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ—Å—Ç—å—é
        message_text = f"üèÜ {club_name}\nüì∞ {news_item.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}\n\n"
        if news_item.get('rubric'):
            message_text += f"üè∑Ô∏è –†—É–±—Ä–∏–∫–∞: {news_item['rubric']}\n"
        if news_item.get('date'):
            message_text += f"üìÖ –î–∞—Ç–∞: {news_item['date']}\n"
        if news_item.get('link'):
            message_text += f"üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {news_item['link']}\n"
        
        message_text += f"\nüìä –ù–æ–≤–æ—Å—Ç—å {current_index + 1} –∏–∑ {len(club_news)}"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å")],
                [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            if news_item.get('image_url'):
                await message.answer_photo(
                    photo=news_item['image_url'],
                    caption=message_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.HTML
                )
            else:
                await message.answer(
                    message_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.HTML
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∫–ª—É–±–∞: {e}")
            await message.answer(
                message_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )

    async def news_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º"""
        text = message.text
        user_id = message.from_user.id
        
        if text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å":
            user_data = await state.get_data()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ª–∏ –º—ã –Ω–æ–≤–æ—Å—Ç–∏ –∫–ª—É–±–∞ –∏–ª–∏ –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏
            if 'club_news' in user_data:
                # –ù–æ–≤–æ—Å—Ç–∏ –∫–ª—É–±–∞
                current_index = user_data.get('club_news_index', 0)
                await state.update_data(club_news_index=current_index + 1)
                await self.show_current_club_news(message, state, user_id)
            else:
                # –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏
                self.current_news_index[user_id] += 1
                await self.show_current_news(message, state, user_id)
        
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.show_main_menu(message, state)

    async def show_main_menu(self, message: Message, state: FSMContext):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì∞ –°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏")],
                [KeyboardButton(text="üèÜ –°–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª—É–±—É")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=keyboard
        )
        
        await state.set_state(UserStates.main_menu)

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        await self.bot.delete_webhook(drop_pending_updates=True)
        
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
        await self.dp.start_polling(self.bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    BOT_TOKEN = "8218894092:AAGFGRvI0C-OczsJMcOFej8f9zM6AXukqL4"
    
    bot = FootballNewsBot(BOT_TOKEN)
    await bot.run()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())