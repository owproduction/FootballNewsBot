import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import sqlite3
from typing import List, Dict
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class FootballNewsBot:
    def __init__(self, token: str, db_path: str = "football_news.db"):
        self.token = token
        self.db_path = db_path
        self.application = Application.builder().token(token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("news", self.show_news_categories))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "–Ø –±–æ—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏–∑ Sportbox.\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ—Å—Ç–µ–π!"
        )
        
        keyboard = [
            [InlineKeyboardButton("üì∞ –°–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç–∏", callback_data="show_news_categories")],
            [InlineKeyboardButton("üèÜ –ü–æ–∏—Å–∫ –ø–æ –∫–ª—É–±–∞–º", callback_data="show_clubs")],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def show_news_categories(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        keyboard = [
            [InlineKeyboardButton("üî• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="news_latest")],
            [InlineKeyboardButton("üèÜ –ü–æ –∫–ª—É–±–∞–º", callback_data="show_clubs")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π:"
        
        if update.message:
            await update.message.reply_text(text, reply_markup=reply_markup)
        else:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_clubs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª—É–±–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        clubs = self.get_all_clubs()
        
        if not clubs:
            text = "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Ç–µ–≥–∞–º–∏ –∫–ª—É–±–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_news_categories")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            query = update.callback_query
            await query.edit_message_text(text, reply_markup=reply_markup)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª—É–±–æ–≤ (–ø–æ 2 –≤ —Ä—è–¥)
        keyboard = []
        row = []
        for club in clubs:
            row.append(InlineKeyboardButton(club, callback_data=f"club_{club}"))
            if len(row) == 2:
                keyboard.append(row)
                row = []
        if row:
            keyboard.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_news_categories")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–± –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:"
        
        query = update.callback_query
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_news(self, update: Update, context: ContextTypes.DEFAULT_TYPE, club: str = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—É–± –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if club:
            context.user_data['current_club'] = club
        else:
            context.user_data['current_club'] = None
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
        news_items = self.get_news_from_db(limit=50, club=club)
        
        if not news_items:
            text = "‚ùå –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–ª—É–± –∏–ª–∏ –∑–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ."
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_news_categories")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            query = update.callback_query
            await query.edit_message_text(text, reply_markup=reply_markup)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['news_items'] = news_items
        context.user_data['current_news_index'] = 0
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
        await self.display_news(update, context, 0)
    
    async def display_news(self, update: Update, context: ContextTypes.DEFAULT_TYPE, index: int):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        news_items = context.user_data.get('news_items', [])
        
        if not news_items or index >= len(news_items):
            await update.callback_query.answer("–ù–æ–≤–æ—Å—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!", show_alert=True)
            return
        
        news_item = news_items[index]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
        text = f"<b>{news_item['title']}</b>\n\n"
        
        if news_item.get('rubric'):
            text += f"üè∑ <b>–†—É–±—Ä–∏–∫–∞:</b> {news_item['rubric']}\n"
        
        if news_item.get('date'):
            text += f"üìÖ <b>–î–∞—Ç–∞:</b> {news_item['date']}\n"
        
        if news_item.get('club_tags'):
            text += f"‚öΩ <b>–ö–ª—É–±—ã:</b> {news_item['club_tags']}\n"
        
        if news_item.get('scraped_at'):
            text += f"‚è∞ <b>–°–æ–±—Ä–∞–Ω–æ:</b> {news_item['scraped_at']}\n"
        
        if news_item.get('link'):
            text += f"\nüîó <a href='{news_item['link']}'>–ß–∏—Ç–∞—Ç—å –Ω–∞ Sportbox</a>"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if index > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="news_prev"))
        
        nav_buttons.append(InlineKeyboardButton(f"{index + 1}/{len(news_items)}", callback_data="stats"))
        
        if index < len(news_items) - 1:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="news_next"))
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        other_buttons = []
        if news_item.get('image_url'):
            other_buttons.append(InlineKeyboardButton("üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data=f"image_{index}"))
        
        other_buttons.append(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="show_news_categories"))
        
        if other_buttons:
            keyboard.append(other_buttons)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        query = update.callback_query
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –µ–≥–æ
        if query.data and query.data.startswith('image_'):
            if news_item.get('image_url'):
                try:
                    await context.bot.send_photo(
                        chat_id=query.message.chat_id,
                        photo=news_item['image_url'],
                        caption=text,
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
                    return
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                    text += "\n\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode='HTML',
                disable_web_page_preview=False
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await query.message.reply_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode='HTML',
                disable_web_page_preview=False
            )
    
    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total_news = self.get_news_count()
        clubs = self.get_all_clubs()
        
        text = (
            f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –Ω–æ–≤–æ—Å—Ç–µ–π</b>\n\n"
            f"üì∞ –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: <b>{total_news}</b>\n"
            f"üèÜ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–ª—É–±–æ–≤: <b>{len(clubs)}</b>\n\n"
            f"<b>–ö–ª—É–±—ã –≤ –±–∞–∑–µ:</b>\n"
        )
        
        for club in clubs:
            club_news_count = len(self.get_news_from_db(club=club, limit=1000))
            text += f"‚Ä¢ {club}: {club_news_count} –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_news_categories")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query = update.callback_query
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def about(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
        text = (
            "<b>‚ÑπÔ∏è –û –±–æ—Ç–µ</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å —Å–∞–π—Ç–∞ Sportbox.ru\n\n"
            "‚öôÔ∏è <b>–§—É–Ω–∫—Ü–∏–∏:</b>\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π\n"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—É–±–∞–º\n"
            "‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –Ω–æ–≤–æ—Å—Ç—è–º–∏\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n\n"
            "üìö <b>–î–∞–Ω–Ω—ã–µ:</b> –ù–æ–≤–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è\n"
            "üîó <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> news.sportbox.ru"
        )
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_news_categories")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query = update.callback_query
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "show_news_categories":
            await self.show_news_categories(update, context)
        
        elif data == "news_latest":
            await self.show_news(update, context)
        
        elif data == "show_clubs":
            await self.show_clubs(update, context)
        
        elif data.startswith("club_"):
            club = data[5:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "club_"
            await self.show_news(update, context, club)
        
        elif data == "news_next":
            current_index = context.user_data.get('current_news_index', 0)
            context.user_data['current_news_index'] = current_index + 1
            await self.display_news(update, context, current_index + 1)
        
        elif data == "news_prev":
            current_index = context.user_data.get('current_news_index', 0)
            context.user_data['current_news_index'] = current_index - 1
            await self.display_news(update, context, current_index - 1)
        
        elif data.startswith("image_"):
            index = int(data[6:])  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏–∑ callback_data
            await self.display_news(update, context, index)
        
        elif data == "stats":
            await self.show_stats(update, context)
        
        elif data == "about":
            await self.about(update, context)
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (–∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –∫–ª–∞—Å—Å—É SimpleSportboxScraper)
    def get_news_from_db(self, limit: int = 100, club: str = None):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        if club:
            cursor.execute('''
                SELECT * FROM news 
                WHERE club_tags LIKE ? 
                ORDER BY created_at DESC 
                LIMIT ?
            ''', (f'%{club}%', limit))
        else:
            cursor.execute('''
                SELECT * FROM news 
                ORDER BY created_at DESC 
                LIMIT ?
            ''', (limit,))
        
        news_items = []
        columns = [column[0] for column in cursor.description]
        
        for row in cursor.fetchall():
            news_item = dict(zip(columns, row))
            news_items.append(news_item)
        
        conn.close()
        return news_items
    
    def get_all_clubs(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—É–±–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT DISTINCT club_tags FROM news 
            WHERE club_tags != '' 
            AND club_tags IS NOT NULL
        ''')
        
        clubs = set()
        for row in cursor.fetchall():
            club_list = row[0].split(', ')
            clubs.update(club_list)
        
        conn.close()
        return sorted(list(clubs))
    
    def get_news_count(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –±–∞–∑–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM news')
        count = cursor.fetchone()[0]
        
        conn.close()
        return count
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.application.run_polling()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def run_bot():
    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
    BOT_TOKEN = "8280366470:AAFtYOsUnJ_J1IWdrh0MEExGrD6BPfOeos4"
    
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram")
        print("2. –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN_HERE' –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω")
        return
    
    bot = FootballNewsBot(BOT_TOKEN)
    bot.run()

if __name__ == "__main__":
    run_bot()