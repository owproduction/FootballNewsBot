import os
import json
import logging
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler
import asyncio

# –ò–º–ø–æ—Ä—Ç –≤–∞—à–µ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
from scrap import SimpleSportboxScraper

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
MAIN_MENU, VIEWING_NEWS, VIEWING_CLUB_NEWS = range(3)

class FootballNewsBot:
    def __init__(self, token: str):
        self.token = token
        self.scraper = SimpleSportboxScraper()
        self.news_data = []
        self.current_news_index = {}
        self.user_states = {}
        
    async def start(self, update: Update, context: CallbackContext) -> int:
        """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
        user = update.message.from_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = user.id
        self.current_news_index[user_id] = 0
        
        # –ü–∞—Ä—Å–∏–º –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–º–æ–∂–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å)
        if not self.news_data:
            await update.message.reply_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
            self.news_data = await self.get_news_data()
        
        keyboard = [
            [KeyboardButton("üì∞ –°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏")],
            [KeyboardButton("üèÜ –°–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª—É–±—É")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "‚öΩ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=reply_markup
        )
        
        return MAIN_MENU

    async def get_news_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ)"""
        try:
            # URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω—É–∂–Ω—ã–π)
            url = "https://news.sportbox.ru/Vidy_sporta/Futbol"
            news = self.scraper.scrape(url, pages=2)
            return news
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return []

    async def show_main_menu(self, update: Update, context: CallbackContext) -> int:
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = [
            [KeyboardButton("üì∞ –°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏")],
            [KeyboardButton("üèÜ –°–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª—É–±—É")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=reply_markup
        )
        
        return MAIN_MENU

    async def show_all_news(self, update: Update, context: CallbackContext) -> int:
        """–ü–æ–∫–∞–∑ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        user_id = update.message.from_user.id
        
        if not self.news_data:
            await update.message.reply_text("‚ùå –ù–æ–≤–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return await self.show_main_menu(update, context)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.current_news_index[user_id] = 0
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
        await self.show_current_news(update, context, user_id)
        
        return VIEWING_NEWS

    async def show_current_news(self, update: Update, context: CallbackContext, user_id: int):
        """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏"""
        if self.current_news_index[user_id] >= len(self.news_data):
            await update.message.reply_text("üì≠ –ù–æ–≤–æ—Å—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!")
            return await self.show_main_menu(update, context)
        
        news_item = self.news_data[self.current_news_index[user_id]]
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ—Å—Ç—å—é
        message_text = f"üì∞ {news_item['title']}\n\n"
        if news_item['rubric']:
            message_text += f"üè∑Ô∏è –†—É–±—Ä–∏–∫–∞: {news_item['rubric']}\n"
        if news_item['date']:
            message_text += f"üìÖ –î–∞—Ç–∞: {news_item['date']}\n"
        if news_item['link']:
            message_text += f"üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {news_item['link']}"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            [KeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å")],
            [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if news_item.get('image_url'):
            try:
                await update.message.reply_photo(
                    photo=news_item['image_url'],
                    caption=message_text,
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                await update.message.reply_text(
                    message_text,
                    reply_markup=reply_markup
                )
        else:
            await update.message.reply_text(
                message_text,
                reply_markup=reply_markup
            )

    async def next_news(self, update: Update, context: CallbackContext) -> int:
        """–°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å"""
        user_id = update.message.from_user.id
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
        self.current_news_index[user_id] += 1
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–æ–≤–æ—Å—Ç—å
        await self.show_current_news(update, context, user_id)
        
        return VIEWING_NEWS

    async def show_club_news_menu(self, update: Update, context: CallbackContext) -> int:
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–ª—É–±–∞"""
        keyboard = [
            [KeyboardButton("–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥"), KeyboardButton("–ë–∞—Ä—Å–µ–ª–æ–Ω–∞")],
            [KeyboardButton("–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥"), KeyboardButton("–ß–µ–ª—Å–∏")],
            [KeyboardButton("–ë–∞–≤–∞—Ä–∏—è"), KeyboardButton("–Æ–≤–µ–Ω—Ç—É—Å")],
            [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±:",
            reply_markup=reply_markup
        )
        
        return VIEWING_CLUB_NEWS

    async def show_club_news(self, update: Update, context: CallbackContext) -> int:
        """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–ª—É–±—É"""
        club_name = update.message.text
        user_id = update.message.from_user.id
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—É–±—É (–ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É)
        club_news = [
            news for news in self.news_data 
            if club_name.lower() in news['title'].lower()
        ]
        
        if not club_news:
            await update.message.reply_text(
                f"‚ùå –ù–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—É–±—É '{club_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–ª—É–±."
            )
            return await self.show_club_news_menu(update, context)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['club_news'] = club_news
        context.user_data['club_news_index'] = 0
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
        await self.show_current_club_news(update, context, user_id, club_name)
        
        return VIEWING_NEWS

    async def show_current_club_news(self, update: Update, context: CallbackContext, user_id: int, club_name: str):
        """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏ –∫–ª—É–±–∞"""
        club_news = context.user_data.get('club_news', [])
        current_index = context.user_data.get('club_news_index', 0)
        
        if current_index >= len(club_news):
            await update.message.reply_text(f"üì≠ –ù–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—É–±—É '{club_name}' –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!")
            return await self.show_main_menu(update, context)
        
        news_item = club_news[current_index]
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ—Å—Ç—å—é
        message_text = f"üèÜ {club_name}\nüì∞ {news_item['title']}\n\n"
        if news_item['rubric']:
            message_text += f"üè∑Ô∏è –†—É–±—Ä–∏–∫–∞: {news_item['rubric']}\n"
        if news_item['date']:
            message_text += f"üìÖ –î–∞—Ç–∞: {news_item['date']}\n"
        if news_item['link']:
            message_text += f"üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {news_item['link']}"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            [KeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å")],
            [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if news_item.get('image_url'):
            try:
                await update.message.reply_photo(
                    photo=news_item['image_url'],
                    caption=message_text,
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                await update.message.reply_text(
                    message_text,
                    reply_markup=reply_markup
                )
        else:
            await update.message.reply_text(
                message_text,
                reply_markup=reply_markup
            )

    async def handle_message(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        user_id = update.message.from_user.id
        
        if text == "üì∞ –°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏":
            return await self.show_all_news(update, context)
        
        elif text == "üèÜ –°–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª—É–±—É":
            return await self.show_club_news_menu(update, context)
        
        elif text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ª–∏ –º—ã –Ω–æ–≤–æ—Å—Ç–∏ –∫–ª—É–±–∞ –∏–ª–∏ –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏
            if 'club_news' in context.user_data:
                context.user_data['club_news_index'] += 1
                club_name = next((club for club in [
                    "–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥", "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞", "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥", 
                    "–ß–µ–ª—Å–∏", "–ë–∞–≤–∞—Ä–∏—è", "–Æ–≤–µ–Ω—Ç—É—Å"
                ] if club in context.user_data.get('last_club', '')), '–∫–ª—É–±–∞')
                return await self.show_current_club_news(update, context, user_id, club_name)
            else:
                return await self.next_news(update, context)
        
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            return await self.show_main_menu(update, context)
        
        elif text in ["–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥", "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞", "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥", "–ß–µ–ª—Å–∏", "–ë–∞–≤–∞—Ä–∏—è", "–Æ–≤–µ–Ω—Ç—É—Å"]:
            context.user_data['last_club'] = text
            return await self.show_club_news(update, context)
        
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
            return await self.show_main_menu(update, context)

    async def error_handler(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
        
        if update and update.message:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(self.token).build()
        
        # Conversation handler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                MAIN_MENU: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
                ],
                VIEWING_NEWS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
                ],
                VIEWING_CLUB_NEWS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
                ],
            },
            fallbacks=[CommandHandler('start', self.start)],
        )
        
        application.add_handler(conv_handler)
        application.add_error_handler(self.error_handler)
        
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    BOT_TOKEN = "YOUR_BOT_TOKEN"
    
    bot = FootballNewsBot(BOT_TOKEN)
    bot.run()